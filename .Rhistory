ctrl_r2 <- get_max_and_pos(percent_ctrl[, rep2_cols])
ctrl_r3 <- get_max_and_pos(percent_ctrl[, rep3_cols])
# RNase Maxima + Positionen
rnase_r1 <- get_max_and_pos(percent_rnase[, rep1_cols])
rnase_r2 <- get_max_and_pos(percent_rnase[, rep2_cols])
rnase_r3 <- get_max_and_pos(percent_rnase[, rep3_cols])
# Protein-Namen
protein_names <- percent_ctrl_df[, 1]
# DataFrames mit Maxima
global_max_ctrl_df <- data.frame(
Protein = protein_names,
Max_Rep1 = ctrl_r1$value,
Max_Rep2 = ctrl_r2$value,
Max_Rep3 = ctrl_r3$value
)
global_max_rnase_df <- data.frame(
Protein = protein_names,
Max_Rep1 = rnase_r1$value,
Max_Rep2 = rnase_r2$value,
Max_Rep3 = rnase_r3$value
)
# DataFrames mit Positionen
# → Optional: nutze Spaltennamen statt nur Index
fraktion_names_r1 <- colnames(percent_ctrl)[rep1_cols]
fraktion_names_r2 <- colnames(percent_ctrl)[rep2_cols]
fraktion_names_r3 <- colnames(percent_ctrl)[rep3_cols]
global_max_pos_ctrl_df <- data.frame(
Protein = protein_names,
Max_Pos_Rep1 = fraktion_names_r1[ctrl_r1$pos],
Max_Pos_Rep2 = fraktion_names_r2[ctrl_r2$pos],
Max_Pos_Rep3 = fraktion_names_r3[ctrl_r3$pos]
)
global_max_pos_rnase_df <- data.frame(
Protein = protein_names,
Max_Pos_Rep1 = fraktion_names_r1[rnase_r1$pos],
Max_Pos_Rep2 = fraktion_names_r2[rnase_r2$pos],
Max_Pos_Rep3 = fraktion_names_r3[rnase_r3$pos]
)
# Ausgabe
print(global_max_ctrl_df)
print(global_max_pos_ctrl_df)
print(global_max_rnase_df)
print(global_max_pos_rnase_df)
## NAs sind noch ein Problem ???
# remove first column with protein names
percent_ctrl <- percent_ctrl_df[, -1]
percent_rnase <- percent_rnase_df[, -1]
# define column sequence per replicate
rep1_cols <- seq(1, ncol(percent_ctrl), by = 3)
rep2_cols <- seq(2, ncol(percent_ctrl), by = 3)
rep3_cols <- seq(3, ncol(percent_ctrl), by = 3)
# Funktion: max + Position
get_max_and_pos <- function(mat) {
max_vals <- apply(mat, 1, max, na.rm = TRUE)
max_pos <- apply(mat, 1, function(x) {
if (all(is.na(x))) {
return(NA)
} else {
return(which.max(x))
}
})
list(value = max_vals, pos = max_pos)
}
# Extrahiere Fraktionsnummern aus den Spaltennamen (z. B. "Fraktion12Rep1" → 12)
extract_fraktion_num <- function(x) {
as.numeric(sub("Fraktion(\\d+).*", "\\1", x))
}
# Wandle Index in Fraktionsnummer
fraktion_pos_ctrl_df <- data.frame(
Protein = percent_ctrl_df[, 1],
Max_Pos_Rep1 = extract_fraktion_num(names_r1[ctrl_r1$pos]),
Max_Pos_Rep2 = extract_fraktion_num(names_r2[ctrl_r2$pos]),
Max_Pos_Rep3 = extract_fraktion_num(names_r3[ctrl_r3$pos])
)
fraktion_pos_rnase_df <- data.frame(
Protein = percent_ctrl_df[, 1],
Max_Pos_Rep1 = extract_fraktion_num(names_r1[rnase_r1$pos]),
Max_Pos_Rep2 = extract_fraktion_num(names_r2[rnase_r2$pos]),
Max_Pos_Rep3 = extract_fraktion_num(names_r3[rnase_r3$pos])
)
# Control Maxima + Positionen
ctrl_r1 <- get_max_and_pos(percent_ctrl[, rep1_cols])
ctrl_r2 <- get_max_and_pos(percent_ctrl[, rep2_cols])
ctrl_r3 <- get_max_and_pos(percent_ctrl[, rep3_cols])
# RNase Maxima + Positionen
rnase_r1 <- get_max_and_pos(percent_rnase[, rep1_cols])
rnase_r2 <- get_max_and_pos(percent_rnase[, rep2_cols])
rnase_r3 <- get_max_and_pos(percent_rnase[, rep3_cols])
# Protein-Namen
protein_names <- percent_ctrl_df[, 1]
# DataFrames mit Maxima
global_max_ctrl_df <- data.frame(
Protein = protein_names,
Max_Rep1 = ctrl_r1$value,
Max_Rep2 = ctrl_r2$value,
Max_Rep3 = ctrl_r3$value
)
global_max_rnase_df <- data.frame(
Protein = protein_names,
Max_Rep1 = rnase_r1$value,
Max_Rep2 = rnase_r2$value,
Max_Rep3 = rnase_r3$value
)
# DataFrames mit Positionen
# → Optional: nutze Spaltennamen statt nur Index
fraktion_names_r1 <- colnames(percent_ctrl)[rep1_cols]
fraktion_names_r2 <- colnames(percent_ctrl)[rep2_cols]
fraktion_names_r3 <- colnames(percent_ctrl)[rep3_cols]
global_max_pos_ctrl_df <- data.frame(
Protein = protein_names,
Max_Pos_Rep1 = fraktion_names_r1[ctrl_r1$pos],
Max_Pos_Rep2 = fraktion_names_r2[ctrl_r2$pos],
Max_Pos_Rep3 = fraktion_names_r3[ctrl_r3$pos]
)
global_max_pos_rnase_df <- data.frame(
Protein = protein_names,
Max_Pos_Rep1 = fraktion_names_r1[rnase_r1$pos],
Max_Pos_Rep2 = fraktion_names_r2[rnase_r2$pos],
Max_Pos_Rep3 = fraktion_names_r3[rnase_r3$pos]
)
# Ausgabe
print(global_max_ctrl_df)
print(global_max_pos_ctrl_df)
print(global_max_rnase_df)
print(global_max_pos_rnase_df)
## NAs sind noch ein Problem ???
# -----------------------------
# 1. Daten vorbereiten
# -----------------------------
# Entferne erste Spalte mit Protein-Namen
percent_ctrl <- percent_ctrl_df[, -1]
percent_rnase <- percent_rnase_df[, -1]
# Spalten pro Replikat identifizieren
rep1_cols <- seq(1, ncol(percent_ctrl), by = 3)
rep2_cols <- seq(2, ncol(percent_ctrl), by = 3)
rep3_cols <- seq(3, ncol(percent_ctrl), by = 3)
# -----------------------------
# 2. Hilfsfunktionen
# -----------------------------
# Extrahiere globale Maxima und Position (Spaltenindex)
get_max_and_pos <- function(mat) {
max_vals <- apply(mat, 1, max, na.rm = TRUE)
max_pos <- apply(mat, 1, function(x) {
if (all(is.na(x))) NA else which.max(x)
})
list(value = max_vals, pos = max_pos)
}
# Extrahiere Fraktionsnummer aus z. B. "Fraction12_Rep1" → 12
extract_fraction_number <- function(name_vector) {
as.numeric(sub("Fraction(\\d+)_Rep\\d+", "\\1", name_vector))
}
# -----------------------------
# 3. Maxima & Positionen berechnen
# -----------------------------
# Für Kontrolle
ctrl_r1 <- get_max_and_pos(percent_ctrl[, rep1_cols])
ctrl_r2 <- get_max_and_pos(percent_ctrl[, rep2_cols])
ctrl_r3 <- get_max_and_pos(percent_ctrl[, rep3_cols])
# Für RNase
rnase_r1 <- get_max_and_pos(percent_rnase[, rep1_cols])
rnase_r2 <- get_max_and_pos(percent_rnase[, rep2_cols])
rnase_r3 <- get_max_and_pos(percent_rnase[, rep3_cols])
# Spaltennamen (z. B. "Fraction12_Rep1")
names_r1 <- colnames(percent_ctrl)[rep1_cols]
names_r2 <- colnames(percent_ctrl)[rep2_cols]
names_r3 <- colnames(percent_ctrl)[rep3_cols]
# -----------------------------
# 4. Ergebnis-DataFrames erstellen
# -----------------------------
# Protein-Namen
protein_names <- percent_ctrl_df[, 1]
# Maxima (intensitätswerte)
global_max_ctrl_df <- data.frame(
Protein = protein_names,
Max_Rep1 = ctrl_r1$value,
Max_Rep2 = ctrl_r2$value,
Max_Rep3 = ctrl_r3$value
)
global_max_rnase_df <- data.frame(
Protein = protein_names,
Max_Rep1 = rnase_r1$value,
Max_Rep2 = rnase_r2$value,
Max_Rep3 = rnase_r3$value
)
# Fraktionsnummern (als numerische Position)
fraktion_pos_ctrl_df <- data.frame(
Protein = protein_names,
Max_Pos_Rep1 = extract_fraction_number(names_r1[ctrl_r1$pos]),
Max_Pos_Rep2 = extract_fraction_number(names_r2[ctrl_r2$pos]),
Max_Pos_Rep3 = extract_fraction_number(names_r3[ctrl_r3$pos])
)
fraktion_pos_rnase_df <- data.frame(
Protein = protein_names,
Max_Pos_Rep1 = extract_fraction_number(names_r1[rnase_r1$pos]),
Max_Pos_Rep2 = extract_fraction_number(names_r2[rnase_r2$pos]),
Max_Pos_Rep3 = extract_fraction_number(names_r3[rnase_r3$pos])
)
# -----------------------------
# 5. Ausgabe (optional)
# -----------------------------
print(global_max_ctrl_df)
print(fraktion_pos_ctrl_df)
print(global_max_rnase_df)
print(fraktion_pos_rnase_df)
## NAs sind noch ein Problem ???
# t Test over all proteins on the fraction positions
# Protein Namen
protein_names <- fraktion_pos_ctrl_df$Protein
# Replicates Spalten (passen an die tatsächlichen Spaltennamen an!)
replicate_cols <- c("Max_Pos_Rep1", "Max_Pos_Rep2", "Max_Pos_Rep3")
# DataFrame für p-Werte (pro Protein 1 Wert)
p_values_df_optionA <- data.frame(Protein = protein_names, pValue = NA_real_)
for (i in seq_along(protein_names)) {
ctrl_vals <- as.numeric(fraktion_pos_ctrl_df[i, replicate_cols])
rnase_vals <- as.numeric(fraktion_pos_rnase_df[i, replicate_cols])
# Prüfen auf NA und genügend Werte
if (length(na.omit(ctrl_vals)) >= 2 && length(na.omit(rnase_vals)) >= 2) {
test_res <- try(t.test(ctrl_vals, rnase_vals, paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values_df_optionA$pValue[i] <- test_res$p.value
}
}
}
print(p_values_df_optionA)
# t Test over all proteins on the fraction positions
# Protein Namen
protein_names <- fraktion_pos_ctrl_df$Protein
# Replicates Spalten (passen an die tatsächlichen Spaltennamen an!)
replicate_cols <- c("Max_Pos_Rep1", "Max_Pos_Rep2", "Max_Pos_Rep3")
# DataFrame für p-Werte (pro Protein 1 Wert)
p_values_df_optionA <- data.frame(Protein = protein_names, pValue = NA_real_)
for (i in seq_along(protein_names)) {
ctrl_vals <- as.numeric(fraktion_pos_ctrl_df[i, replicate_cols])
rnase_vals <- as.numeric(fraktion_pos_rnase_df[i, replicate_cols])
# Prüfen auf NA und genügend Werte
if (length(na.omit(ctrl_vals)) >= 2 && length(na.omit(rnase_vals)) >= 2) {
test_res <- try(t.test(ctrl_vals, rnase_vals, paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values_df_global_positions$pValue[i] <- test_res$p.value
}
}
}
print(p_values_df_global_positions)
# t Test over all proteins on the fraction positions
# Protein Namen
protein_names <- fraktion_pos_ctrl_df$Protein
# Replicates Spalten (passen an die tatsächlichen Spaltennamen an!)
replicate_cols <- c("Max_Pos_Rep1", "Max_Pos_Rep2", "Max_Pos_Rep3")
# DataFrame für p-Werte (pro Protein 1 Wert)
p_values_df_global_positions <- data.frame(Protein = protein_names, pValue = NA_real_)
for (i in seq_along(protein_names)) {
ctrl_vals <- as.numeric(fraktion_pos_ctrl_df[i, replicate_cols])
rnase_vals <- as.numeric(fraktion_pos_rnase_df[i, replicate_cols])
# Prüfen auf NA und genügend Werte
if (length(na.omit(ctrl_vals)) >= 2 && length(na.omit(rnase_vals)) >= 2) {
test_res <- try(t.test(ctrl_vals, rnase_vals, paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values_df_global_positions$pValue[i] <- test_res$p.value
}
}
}
print(p_values_df_global_positions)
# t Test over all proteins on the fraction positions
# protein names
protein_names <- fraktion_pos_ctrl_df$Protein
# generate replicate columns
replicate_cols <- c("Max_Pos_Rep1", "Max_Pos_Rep2", "Max_Pos_Rep3")
# DataFrame for p-Values (per protein one value)
p_values_df_global_positions <- data.frame(Protein = protein_names, pValue = NA_real_)
for (i in seq_along(protein_names)) {
ctrl_vals <- as.numeric(fraktion_pos_ctrl_df[i, replicate_cols])
rnase_vals <- as.numeric(fraktion_pos_rnase_df[i, replicate_cols])
# search for NAs
if (length(na.omit(ctrl_vals)) >= 2 && length(na.omit(rnase_vals)) >= 2) {
test_res <- try(t.test(ctrl_vals, rnase_vals, paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values_df_global_positions$pValue[i] <- test_res$p.value
}
}
}
print(p_values_df_global_positions)
# t Test for every fraction over all proteins
protein_names <- percent_ctrl_df[, 1]
num_fractions <- ncol(percent_ctrl)
p_values_list <- vector("numeric", length = num_fractions)
for (j in 1:num_fractions) {
ctrl_values <- percent_ctrl[, j]
rnase_values <- percent_rnase[, j]
# Nur Paare mit Werten in beiden Gruppen nehmen
valid_idx <- which(!is.na(ctrl_values) & !is.na(rnase_values))
if (length(valid_idx) >= 2) {
test_res <- try(t.test(ctrl_values[valid_idx], rnase_values[valid_idx], paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values_list[j] <- test_res$p.value
} else {
p_values_list[j] <- NA
}
} else {
p_values_list[j] <- NA
}
}
# Ergebnis als DataFrame (1 Zeile mit Protein-Namen in Spalte 1 + 25 p-Wert-Spalten)
# Da hier aber p-Werte pro Fraktion (nicht pro Protein), bauen wir DataFrame mit 1 Zeile und Spalten pro Fraktion
p_values_df_optionB <- data.frame(t(p_values_list))
colnames(p_values_df_optionB) <- colnames(percent_ctrl)
p_values_df_optionB$Protein <- "All_Proteins"
# Optional: Protein-Spalte vorne setzen
p_values_df_optionB <- p_values_df_optionB[, c("Protein", colnames(percent_ctrl))]
print(p_values_df_optionB)
# t Test for every fraction over all proteins
# protein names
protein_names <- percent_ctrl_df[, 1]
# define lenght of list
num_fractions <- ncol(percent_ctrl)
p_values_list <- vector("numeric", length = num_fractions)
for (j in 1:num_fractions) {
ctrl_values <- percent_ctrl[, j]
rnase_values <- percent_rnase[, j]
# extract only paires without NAs
valid_idx <- which(!is.na(ctrl_values) & !is.na(rnase_values))
if (length(valid_idx) >= 2) {
test_res <- try(t.test(ctrl_values[valid_idx], rnase_values[valid_idx], paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values_list[j] <- test_res$p.value
} else {
p_values_list[j] <- NA
}
} else {
p_values_list[j] <- NA
}
}
# Ergebnis als DataFrame (1 Zeile mit Protein-Namen in Spalte 1 + 25 p-Wert-Spalten)
# Da hier aber p-Werte pro Fraktion (nicht pro Protein), bauen wir DataFrame mit 1 Zeile und Spalten pro Fraktion
p_values_df_all_proteins <- data.frame(t(p_values_list))
colnames(p_values_df_all_proteins) <- colnames(percent_ctrl)
p_values_df_all_proteins$Protein <- "All_Proteins"
# Optional: Protein-Spalte vorne setzen
p_values_df_all_proteins <- p_values_df_all_proteins[, c("Protein", colnames(percent_ctrl))]
print(p_values_df_all_proteins)
# t Test for every fraction over all proteins
# protein names
protein_names <- percent_ctrl_df[, 1]
# define lenght of list
num_fractions <- ncol(percent_ctrl)
p_values_list <- vector("numeric", length = num_fractions)
for (j in 1:num_fractions) {
ctrl_values <- percent_ctrl[, j]
rnase_values <- percent_rnase[, j]
# extract only paires without NAs
valid_idx <- which(!is.na(ctrl_values) & !is.na(rnase_values))
if (length(valid_idx) >= 2) {
test_res <- try(t.test(ctrl_values[valid_idx], rnase_values[valid_idx], paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values_list[j] <- test_res$p.value
} else {
p_values_list[j] <- NA
}
} else {
p_values_list[j] <- NA
}
}
# result as dataframe
p_values_df_all_proteins <- data.frame(t(p_values_list))
colnames(p_values_df_all_proteins) <- colnames(percent_ctrl)
p_values_df_all_proteins$Protein <- "All_Proteins"
# first column with protein names
p_values_df_all_proteins <- p_values_df_all_proteins[, c("Protein", colnames(percent_ctrl))]
print(p_values_df_all_proteins)
# wilcoxon test over all fractions
# Angenommen:
# percent_ctrl und percent_rnase sind Dataframes/Matrizen mit gleichen Dimensionen
# Zeilen = Proteine, Spalten = Fraktionen (z.B. 25)
# Werte = Messwerte pro Protein pro Fraktion
num_fractions <- ncol(normalized_ctrl_df)
p_values <- numeric(num_fractions)
for (i in seq_len(num_fractions)) {
ctrl_vals <- normalized_ctrl_df[, i]
rnase_vals <- normalized_rnase_df[, i]
# Paare, bei denen beide Werte nicht NA sind
valid_idx <- which(!is.na(ctrl_vals) & !is.na(rnase_vals))
if (length(valid_idx) >= 2) {  # Wilcoxon braucht mindestens 2 Paare
test_res <- try(wilcox.test(ctrl_vals[valid_idx], rnase_vals[valid_idx], paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values[i] <- test_res$p.value
} else {
p_values[i] <- NA
}
} else {
p_values[i] <- NA
}
}
# Ergebnis als DataFrame mit Protein-Namen und p-Werten
# Da p-Werte pro Fraktion, nicht pro Protein, bauen wir DataFrame mit 1 Zeile und Spalten pro Fraktion
p_values_df <- data.frame(t(p_values))
colnames(p_values_df) <- colnames(percent_ctrl)
p_values_df$Test <- "Wilcoxon_pValue"
# Protein-Spalte (optional) vorne anfügen
p_values_df <- p_values_df[, c("Test", colnames(percent_ctrl))]
ncol(percent_ctrl)  # z.B. 75
length(p_values)    # z.B. 26
# wilcoxon test over all fractions
num_fractions <- ncol(normalized_ctrl_df)
p_values <- numeric(num_fractions)
for (i in seq_len(num_fractions)) {
ctrl_vals <- normalized_ctrl_df[, i]
rnase_vals <- normalized_rnase_df[, i]
valid_idx <- which(!is.na(ctrl_vals) & !is.na(rnase_vals))
if (length(valid_idx) >= 2) {
test_res <- try(wilcox.test(ctrl_vals[valid_idx], rnase_vals[valid_idx], paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values[i] <- test_res$p.value
} else {
p_values[i] <- NA
}
} else {
p_values[i] <- NA
}
}
# p_values ist Vektor mit Länge = ncol(normalized_ctrl_df)
# p_values_df mit Spaltennamen von normalized_ctrl_df
p_values_df <- data.frame(t(p_values))
colnames(p_values_df) <- colnames(normalized_ctrl_df)
p_values_df$Test <- "Wilcoxon_pValue"
# Um Spaltenreihenfolge zu ändern, so dass "Test" vorne steht:
p_values_df <- p_values_df[, c("Test", colnames(normalized_ctrl_df))]
print(p_values_df)
# wilcoxon test over all proteins and their fractions
num_fractions <- ncol(normalized_ctrl_df)
p_values <- numeric(num_fractions)
for (i in seq_len(num_fractions)) {
ctrl_vals <- normalized_ctrl_df[, i]
rnase_vals <- normalized_rnase_df[, i]
# Nur Paare, die in beiden nicht NA sind
valid_idx <- which(!is.na(ctrl_vals) & !is.na(rnase_vals))
if (length(valid_idx) >= 2) {
test_res <- try(wilcox.test(ctrl_vals[valid_idx], rnase_vals[valid_idx], paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values[i] <- test_res$p.value
} else {
p_values[i] <- NA
}
} else {
p_values[i] <- NA
}
}
# DataFrame mit 1 Zeile, Spalten = Fraktionen, plus Beschreibung
p_values_df <- data.frame(t(p_values))
colnames(p_values_df) <- colnames(normalized_ctrl_df)
p_values_df$Test <- "Wilcoxon_pValue"
# "Test" vorne anordnen
p_values_df <- p_values_df[, c("Test", colnames(normalized_ctrl_df))]
print(p_values_df)
# wilcoxon test over all proteins
# Protein-Namen aus der ersten Spalte
protein_names <- normalized_ctrl_df[, 1]
# Nur die numerischen Werte (alle Spalten außer erste mit Protein-Namen)
ctrl_values <- normalized_ctrl_df[, -1]
rnase_values <- normalized_rnase_df[, -1]
num_proteins <- nrow(ctrl_values)
p_values_protein <- numeric(num_proteins)
for (i in seq_len(num_proteins)) {
ctrl_vec <- as.numeric(ctrl_values[i, ])
rnase_vec <- as.numeric(rnase_values[i, ])
# Nur Paare mit Werten in beiden Gruppen nehmen
valid_idx <- which(!is.na(ctrl_vec) & !is.na(rnase_vec))
if (length(valid_idx) >= 2) {  # Wilcoxon braucht mindestens 2 Paare
test_res <- try(wilcox.test(ctrl_vec[valid_idx], rnase_vec[valid_idx], paired = TRUE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values_protein[i] <- test_res$p.value
} else {
p_values_protein[i] <- NA
}
} else {
p_values_protein[i] <- NA
}
}
# Ergebnis DataFrame
result_df <- data.frame(
Protein = protein_names,
Wilcoxon_pValue = p_values_protein
)
print(result_df)
# wilcoxon test over all proteins
# Protein-Namen aus der ersten Spalte
protein_names <- normalized_ctrl_df[, 1]
# Nur die numerischen Werte (alle Spalten außer erste mit Protein-Namen)
ctrl_values <- normalized_ctrl_df[, -1]
rnase_values <- normalized_rnase_df[, -1]
num_proteins <- nrow(ctrl_values)
p_values_protein <- numeric(num_proteins)
for (i in seq_len(num_proteins)) {
ctrl_vec <- as.numeric(ctrl_values[i, ])
rnase_vec <- as.numeric(rnase_values[i, ])
# Nur Paare mit Werten in beiden Gruppen nehmen
valid_idx <- which(!is.na(ctrl_vec) & !is.na(rnase_vec))
if (length(valid_idx) >= 2) {  # Wilcoxon braucht mindestens 2 Paare
test_res <- try(wilcox.test(ctrl_vec[valid_idx], rnase_vec[valid_idx], paired = TRUE, exact = FALSE), silent = TRUE)
if (!inherits(test_res, "try-error")) {
p_values_protein[i] <- test_res$p.value
} else {
p_values_protein[i] <- NA
}
} else {
p_values_protein[i] <- NA
}
}
# Ergebnis DataFrame
result_df <- data.frame(
Protein = protein_names,
Wilcoxon_pValue = p_values_protein
)
print(result_df)
