head(percent_rnase_df)
calculate_mean_per_fraction <- function(df, n_fractions = 25, n_replicates = 3) {
proteins <- df[, 1]  # Protein-Namen
data_only <- df[, -1]  # Nur Werte
mean_matrix <- matrix(NA, nrow = nrow(data_only), ncol = n_fractions)
for (f in 1:n_fractions) {
# Spalten für Fraktion f (jeweils 3 Replikate)
cols <- ((f - 1) * n_replicates + 1):(f * n_replicates)
mean_matrix[, f] <- rowMeans(data_only[, cols], na.rm = TRUE)
}
# Ergebnis als DataFrame
mean_df <- as.data.frame(mean_matrix)
colnames(mean_df) <- paste0("Fraction", 1:n_fractions)
final_df <- cbind(Protein = proteins, mean_df)
return(final_df)
}
mean_ctrl_df <- calculate_mean_per_fraction(percent_ctrl_df)
mean_rnase_df <- calculate_mean_per_fraction(percent_rnase_df)
# Kontrolle
head(mean_ctrl_df)
head(mean_rnase_df)
# Zeilensummen berechnen (ab der zweiten Spalte)
zeilensummen <- rowSums(mean_ctrl_df[, -1])
print(zeilensummen)
# normalization of amount of protein to equal 100%
calculate_fraction_percentages <- function(mean_df) {
proteins <- mean_df[, 1]
data_only <- mean_df[, -1]
# Zeilensummen (Summe über alle Fraktionen pro Protein)
row_totals <- rowSums(data_only, na.rm = TRUE)
# Prozentuale Anteile berechnen
percent_matrix <- sweep(data_only, 1, row_totals, FUN = "/") * 100
# Ergebnis zusammenführen
percent_df <- cbind(Protein = proteins, as.data.frame(percent_matrix))
colnames(percent_df) <- colnames(mean_df)
return(percent_df)
}
# Prozentuale Verteilungen
normalized_ctrl_df  <- calculate_fraction_percentages(mean_ctrl_df)
normalized_rnase_df <- calculate_fraction_percentages(mean_rnase_df)
# Kontrolle
head(normalized_ctrl_df)
head(normalized_rnase_df)
# Zeilensummen berechnen (ab der zweiten Spalte)
zeilensumme <- rowSums(normalized_ctrl_df[, -1])
print(zeilensumme)
# Prüfen, ob es Zeilen mit Summe == 0 gibt (ab Spalte 2) für Ctrl
zeilensummen <- rowSums(normalized_ctrl_df[, -1])
# Logischer Vektor: TRUE für Zeilen, deren Summe 0 ist
zeilen_mit_nullsumme <- zeilensummen == 0
# Gibt es mindestens eine solche Zeile?
any(zeilen_mit_nullsumme)
#für RNase
# Prüfen, ob es Zeilen mit Summe == 0 gibt (ab Spalte 2)
zeilensummen_rnase <- rowSums(normalized_rnase_df[, -1])
# Logischer Vektor: TRUE für Zeilen, deren Summe 0 ist
zeilen_mit_nullsumme_rnase <- zeilensummen_rnase == 0
# Gibt es mindestens eine solche Zeile?
any(zeilen_mit_nullsumme_rnase)
install.packages("mixOmics")
library(mixOmics)
res.pca <- pca((normed_ctrl_df)[-1], ncomp = 10)
plot(res.pca)
#ohne transformation
batch.pca.before <- pca((normed_ctrl_df)[-1], ncomp = 3)
library(ggplot2)
# Extrahiere Scores (PCA-Komponenten)
pca_scores <- as.data.frame(batch.pca.before$variates$X)
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(size = 3, alpha = 0.8, color = "steelblue") +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Ungruppiert)"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5)
)
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# Hole Sample-Namen
sample_names <- colnames(normed_ctrl_df)[-1]
# Extrahiere Fraction-Teil als Batch-Label
fraction_labels <- sapply(strsplit(sample_names, "_"), `[`, 1)
# Hole PCA-Sample-Scores
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Anhängen der Batch-Labels
pca_sample_scores$batch <- fraction_labels
# Plot
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Fraction-Batch)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "right" ) +
guides(color = guide_legend(title = "Batch (Fraction)"))
install.packages("mixOmics")
print(normed_ctrl_df)
ibrary(limma)
library(mixOmics)
library(ggplot2)
# 1. Matrix vorbereiten
expr_matrix <- as.matrix(normed_ctrl_df[,-1])  # ohne Feature-Namen
rownames(expr_matrix) <- normed_ctrl_df[[1]]   # Zeilennamen setzen
# 2. Batch-Labels extrahieren (z. B. "Fraction1", "Fraction2" etc.)
sample_names <- colnames(expr_matrix)
batch <- sapply(strsplit(sample_names, "_"), `[`, 1)
# 3. Remove Batch Effect
corrected_matrix <- removeBatchEffect(expr_matrix, batch = batch)
# 4. PCA auf korrigierter Matrix
batch.pca.after <- pca(t(corrected_matrix), ncomp = 3)  # transponieren wegen Samples in Spalten
library(limma)
library(mixOmics)
library(ggplot2)
# 1. Matrix vorbereiten
expr_matrix <- as.matrix(normed_ctrl_df[,-1])  # ohne Feature-Namen
rownames(expr_matrix) <- normed_ctrl_df[[1]]   # Zeilennamen setzen
# 2. Batch-Labels extrahieren (z. B. "Fraction1", "Fraction2" etc.)
sample_names <- colnames(expr_matrix)
batch <- sapply(strsplit(sample_names, "_"), `[`, 1)
# 3. Remove Batch Effect
corrected_matrix <- removeBatchEffect(expr_matrix, batch = batch)
# 4. PCA auf korrigierter Matrix
batch.pca.after <- pca(t(corrected_matrix), ncomp = 3)  # transponieren wegen Samples in Spalten
# 5. Ergebnisse vorbereiten für Plot
pca_sample_scores <- as.data.frame(batch.pca.after$variates$X)
pca_sample_scores$batch <- batch
# 6. Plot
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.after$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.after$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot nach Batch-Korrektur (limma)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5)) +
guides(color = guide_legend(title = "Batch (Fraction)"))
#nach replikaten
# PCA durchführen (wie vorher)
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# Hole Sample-Namen (ohne die erste Spalte)
sample_names <- colnames(normed_ctrl_df)[-1]
# Extrahiere den Replikat-Teil als Label (zweiter Teil nach "_")
replicate_labels <- sapply(strsplit(sample_names, "_"), `[`, 2)
# Hole PCA-Sample-Scores
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Anhängen der Replikat-Labels
pca_sample_scores$replicate <- replicate_labels
# Plot mit Färbung nach Replikaten
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = replicate)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Replikaten)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "right") +
guides(color = guide_legend(title = "Replikat"))
#nach replikaten
# PCA durchführen (wie vorher)
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# Hole Sample-Namen (ohne die erste Spalte)
sample_names <- colnames(normed_ctrl_df)[-1]
# Extrahiere den Replikat-Teil als Label (zweiter Teil nach "_")
replicate_labels <- sapply(strsplit(sample_names, "_"), `[`, 3)
# Hole PCA-Sample-Scores
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Anhängen der Replikat-Labels
pca_sample_scores$replicate <- replicate_labels
# Plot mit Färbung nach Replikaten
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = replicate)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Replikaten)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "right") +
guides(color = guide_legend(title = "Replikat"))
library(limma)
library(mixOmics)
library(ggplot2)
# 1. Matrix vorbereiten
expr_matrix <- as.matrix(normed_ctrl_df[,-1])  # ohne Feature-Namen
rownames(expr_matrix) <- normed_ctrl_df[[1]]   # Zeilennamen setzen
# 2. Batch-Labels extrahieren
sample_names <- colnames(expr_matrix)
batch <- sapply(strsplit(sample_names, "_"), `[`, 3)
# 3. Remove Batch Effect
corrected_matrix <- removeBatchEffect(expr_matrix, batch = batch)
# 4. PCA auf korrigierter Matrix
batch.pca.after <- pca(t(corrected_matrix), ncomp = 3)  # transponieren wegen Samples in Spalten
# 5. Ergebnisse vorbereiten für Plot
pca_sample_scores <- as.data.frame(batch.pca.after$variates$X)
pca_sample_scores$batch <- batch
# 6. Plot
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.after$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.after$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot nach Batch-Korrektur (limma)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5)) +
guides(color = guide_legend(title = "Batch (Fraction)"))
# PCA wie gehabt
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# PCA-Scores als DataFrame
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Kombinierte Labels anhängen
pca_sample_scores$batch <- combined_labels
# Plot mit kombinierten Labels als Farbe
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Fraktion und Replikat)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "right") +
guides(color = guide_legend(title = "Fraktion_Replikat"))
#fraktion und rep
# Sample-Namen holen
sample_names <- colnames(normed_ctrl_df)[-1]
# Jeden Sample-Namen splitten bei "_"
split_names <- strsplit(sample_names, "_")
# Fraktion extrahieren (erster Teil)
fractions <- sapply(split_names, `[`, 1)
# Replikat extrahieren (zweiter Teil)
replicates <- sapply(split_names, `[`, 3)
# Neue Labels erstellen (z.B. "Fraction1_Rep1")
combined_labels <- paste(fractions, replicates, sep = "_")
# Beispiel Ausgabe
print(combined_labels)
# PCA wie gehabt
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# PCA-Scores als DataFrame
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Kombinierte Labels anhängen
pca_sample_scores$batch <- combined_labels
# Plot mit kombinierten Labels als Farbe
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Fraktion und Replikat)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "right") +
guides(color = guide_legend(title = "Fraktion_Replikat"))
#fraktion und rep
# Sample-Namen holen
sample_names <- colnames(normed_ctrl_df)[-1]
# Jeden Sample-Namen splitten bei "_"
split_names <- strsplit(sample_names, "_")
# Fraktion extrahieren (erster Teil)
fractions <- sapply(split_names, `[`, 1)
# Replikat extrahieren (zweiter Teil)
replicates <- sapply(split_names, `[`, 3)
# Neue Labels erstellen (z.B. "Fraction1_Rep1")
combined_labels <- paste(fractions, replicates, sep = "_")
# Beispiel Ausgabe
print(combined_labels)
# PCA wie gehabt
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# PCA-Scores als DataFrame
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Kombinierte Labels anhängen
pca_sample_scores$batch <- combined_labels
# Plot mit kombinierten Labels als Farbe
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = fraction, shape = treatment)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Fraction, Farbe, Treatment geformt )"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
) +
guides(
color = guide_legend(title = "Fraction"),
shape = guide_legend(title = "Treatment")
)
#fraktion und rep
# Sample-Namen holen
sample_names <- colnames(normed_ctrl_df)[-1]
# Jeden Sample-Namen splitten bei "_"
split_names <- strsplit(sample_names, "_")
# Fraktion extrahieren (erster Teil)
fractions <- sapply(split_names, `[`, 1)
# Replikat extrahieren (zweiter Teil)
replicates <- sapply(split_names, `[`, 3)
# Neue Labels erstellen (z.B. "Fraction1_Rep1")
combined_labels <- paste(fractions, replicates, sep = "_")
# Beispiel Ausgabe
print(combined_labels)
# PCA wie gehabt
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# PCA-Scores als DataFrame
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Kombinierte Labels anhängen
pca_sample_scores$batch <- combined_labels
# Plot mit kombinierten Labels als Farbe
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Fraktion und Replikat)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "right") +
guides(color = guide_legend(title = "Fraktion_Replikat"))
````
```{r}
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = fraction, shape = treatment)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Fraction, Farbe, Treatment geformt )"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
) +
guides(
color = guide_legend(title = "Fraction"),
shape = guide_legend(title = "Treatment")
)
#fraktion und rep
# Sample-Namen holen
sample_names <- colnames(normed_ctrl_df)[-1]
# Jeden Sample-Namen splitten bei "_"
split_names <- strsplit(sample_names, "_")
# Fraktion extrahieren (erster Teil)
fractions <- sapply(split_names, `[`, 1)
# Replikat extrahieren (zweiter Teil)
replicates <- sapply(split_names, `[`, 3)
# Neue Labels erstellen (z.B. "Fraction1_Rep1")
combined_labels <- paste(fractions, replicates, sep = "_")
# Beispiel Ausgabe
print(combined_labels)
# PCA wie gehabt
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# PCA-Scores als DataFrame
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Kombinierte Labels anhängen
pca_sample_scores$batch <- combined_labels
# Plot mit kombinierten Labels als Farbe
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Fraktion und Replikat)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "right") +
guides(color = guide_legend(title = "Fraktion_Replikat"))
#fraktion und rep
# Sample-Namen holen
sample_names <- colnames(normed_ctrl_df)[-1]
# Jeden Sample-Namen splitten bei "_"
split_names <- strsplit(sample_names, "_")
# Fraktion extrahieren (erster Teil)
fractions <- sapply(split_names, `[`, 1)
# Replikat extrahieren (zweiter Teil)
replicates <- sapply(split_names, `[`, 3)
# Neue Labels erstellen (z.B. "Fraction1_Rep1")
combined_labels <- paste(fractions, replicates, sep = "_")
# Beispiel Ausgabe
print(combined_labels)
# PCA wie gehabt
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# PCA-Scores als DataFrame
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Kombinierte Labels anhängen
pca_sample_scores$batch <- combined_labels
# Plot mit kombinierten Labels als Farbe
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Fraktion und Replikat)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "right") +
#fraktion und rep
# Sample-Namen holen
sample_names <- colnames(normed_ctrl_df)[-1]
# Jeden Sample-Namen splitten bei "_"
split_names <- strsplit(sample_names, "_")
# Fraktion extrahieren (erster Teil)
fractions <- sapply(split_names, `[`, 1)
# Replikat extrahieren (zweiter Teil)
replicates <- sapply(split_names, `[`, 3)
# Neue Labels erstellen (z.B. "Fraction1_Rep1")
combined_labels <- paste(fractions, replicates, sep = "_")
# Beispiel Ausgabe
print(combined_labels)
# PCA wie gehabt
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# PCA-Scores als DataFrame
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Kombinierte Labels anhängen
pca_sample_scores$batch <- combined_labels
# Plot mit kombinierten Labels als Farbe
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Fraktion und Replikat)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "right") +
guides(color = guide_legend(title = "Fraktion_Replikat"))
#fraktion und rep
# Sample-Namen holen
sample_names <- colnames(normed_ctrl_df)[-1]
# Jeden Sample-Namen splitten bei "_"
split_names <- strsplit(sample_names, "_")
# Fraktion extrahieren (erster Teil)
fractions <- sapply(split_names, `[`, 1)
# Replikat extrahieren (zweiter Teil)
replicates <- sapply(split_names, `[`, 3)
# Neue Labels erstellen (z.B. "Fraction1_Rep1")
combined_labels <- paste(fractions, replicates, sep = "_")
# Beispiel Ausgabe
print(combined_labels)
# PCA wie gehabt
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# PCA-Scores als DataFrame
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Kombinierte Labels anhängen
pca_sample_scores$batch <- combined_labels
# Plot mit kombinierten Labels als Farbe
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Fraktion und Replikat)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5) +
guides(color = guide_legend(title = "Fraktion_Replikat"))
#fraktion und rep
# Sample-Namen holen
sample_names <- colnames(normed_ctrl_df)[-1]
# Jeden Sample-Namen splitten bei "_"
split_names <- strsplit(sample_names, "_")
# Fraktion extrahieren (erster Teil)
fractions <- sapply(split_names, `[`, 1)
# Replikat extrahieren (zweiter Teil)
replicates <- sapply(split_names, `[`, 3)
# Neue Labels erstellen (z.B. "Fraction1_Rep1")
combined_labels <- paste(fractions, replicates, sep = "_")
# Beispiel Ausgabe
print(combined_labels)
# PCA wie gehabt
batch.pca.before <- pca(t(normed_ctrl_df[-1]), ncomp = 3)
# PCA-Scores als DataFrame
pca_sample_scores <- as.data.frame(batch.pca.before$variates$X)
# Kombinierte Labels anhängen
pca_sample_scores$batch <- combined_labels
# Plot mit kombinierten Labels als Farbe
library(ggplot2)
ggplot(pca_sample_scores, aes(x = PC1, y = PC2, color = batch)) +
geom_point(size = 3, alpha = 0.8) +
labs(
x = paste0("PC1 (", round(batch.pca.before$explained_variance[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(batch.pca.before$explained_variance[2] * 100, 1), "%)"),
title = "PCA Plot (Samples, gefärbt nach Fraktion und Replikat)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5)) +
guides(color = guide_legend(title = "Fraktion_Replikat"))
