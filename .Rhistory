library(readr)
library(dplyr)
library(tibble)
url <- "https://hub.dkfz.de/s/tw4GYqYC9MFfG3p/download/RDeeP_HeLa_NS.csv.zip"
#Create a temporary file and download the ZIP
temp_file <- tempfile()
download.file(url, temp_file)
zip_contents <- unzip(temp_file, list = TRUE)
print(zip_contents)
csv_file <- unzip(temp_file, files = zip_contents$Name[1], exdir = tempdir())
Hela_NS <- read.csv(csv_file, sep = ";")
Hela_NS <- Hela_NS %>%
column_to_rownames("Protein_Name")
hist(Hela_NS$Fraction1_Ctrl_Rep1,
main = "Protein Distribution in Fraction1_Ctrl_Rep1",
xlab = "Protein Amount",
col = "skyblue",
breaks = 30)
hist(log10(Hela_NS$Fraction1_Ctrl_Rep1 + 1),
main = "Log10 Protein Abundance",
xlab = "log10 Protein Amount",
col = "skyblue",
breaks = 30)
# Find the maximum value in the whole dataset
max_value <- max(Hela_NS, na.rm = TRUE)
# Or more directly: which column contains the max value
column_with_max <- names(which(sapply(Hela_NS, function(col) any(col == max_value, na.rm = TRUE))))
# Also get the protein name (row) where it occurs
protein_with_max <- rownames(Hela_NS)[which(Hela_NS[[column_with_max]] == max_value)]
# Output
cat("Column with highest abundance:", column_with_max, "\n")
cat("Protein with highest abundance:", protein_with_max, "\n")
cat("Max value:", max_value, "\n")
hist(log10(Hela_NS$Fraction8_RNase_Rep2 + 1),
main = "Log10 Protein Abundance",
xlab = "log10 Protein Amount",
col = "skyblue",
breaks = 30)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
#load dataset
url <- "https://hub.dkfz.de/s/QT3BfRperQqMxPF/download/RDeeP_A549_NS.csv.zip"
#Create a temporary file and download the ZIP
temp_file <- tempfile()
download.file(url, temp_file)
zip_contents <- unzip(temp_file, list = TRUE)
print(zip_contents)
csv_file <- unzip(temp_file, files = zip_contents$Name[1], exdir = tempdir())
A549_NS <- read.csv(csv_file, sep = ";")
View(A549_NS)
#data exploration
View(A549_NS)
#number of rows and columns
nrow(A549_NS)
ncol(A549_NS)
#type of data
sum(sapply(A549_NS, is.numeric))
#finding NAs
sum(is.na(A549_NS))
knitr::opts_chunk$set(echo = TRUE)
#load dataset
url <- "https://hub.dkfz.de/s/QT3BfRperQqMxPF/download/RDeeP_A549_NS.csv.zip"
#Create a temporary file and download the ZIP
temp_file <- tempfile()
download.file(url, temp_file)
zip_contents <- unzip(temp_file, list = TRUE)
print(zip_contents)
csv_file <- unzip(temp_file, files = zip_contents$Name[1], exdir = tempdir())
A549_NS <- read.csv(csv_file, header = TRUE, sep = ";")
View(A549_NS)
#data exploration
View(A549_NS)
#number of rows and columns
nrow(A549_NS)
ncol(A549_NS)
#type of data (überprüft die class der Spalten)
sum(sapply(A549_NS, is.numeric))
#finding NAs
sum(is.na(A549_NS))
dim(A549_NS)
#load dataset
url <- "https://hub.dkfz.de/s/QT3BfRperQqMxPF/download/RDeeP_A549_NS.csv.zip"
#Create a temporary file and download the ZIP
temp_file <- tempfile()
download.file(url, temp_file)
zip_contents <- unzip(temp_file, list = TRUE)
print(zip_contents)
csv_file <- unzip(temp_file, files = zip_contents$Name[1], exdir = tempdir())
A549_NS <- read.csv(csv_file, sep = ";", header = TRUE, row.names = 1)
View(A549_NS)
#data exploration
View(A549_NS)
#number of rows and columns
nrow(A549_NS)
ncol(A549_NS)
#type of data (überprüft die class der Spalten)
sum(sapply(A549_NS, is.numeric))
#finding NAs
sum(is.na(A549_NS))
dim(A549_NS)
#Dataframe definition -> funktioniert nicht
data <- data.frame(
treatment = treatment,
replicates= replicates,
fraction= fraction,
row.names = colnames(A549_NS),
)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
#load dataset
url <- "https://hub.dkfz.de/s/QT3BfRperQqMxPF/download/RDeeP_A549_NS.csv.zip"
#Create a temporary file and download the ZIP
temp_file <- tempfile()
download.file(url, temp_file)
zip_contents <- unzip(temp_file, list = TRUE)
print(zip_contents)
csv_file <- unzip(temp_file, files = zip_contents$Name[1], exdir = tempdir())
A549_NS <- read.csv(csv_file, sep = ";", header = TRUE, row.names = 1)
View(A549_NS)
#data exploration
View(A549_NS)
#number of rows and columns
nrow(A549_NS)
ncol(A549_NS)
#type of data (überprüft die class der Spalten)
sum(sapply(A549_NS, is.numeric))
#finding NAs
sum(is.na(A549_NS))
dim(A549_NS)
n_fractions <- 25
n_replicates <- 6
# treatment: variating CTRL and RNAse, 75 pairs -> 150 columns
treatment <- factor(rep(c("CTRL", "RNASE"), times = n_fractions * n_replicates/2))
# replicates: 6 replicates per fraction
replicates <- factor(c("ctrl1","rnase1","ctrl2","rnase2","ctrl3","rnase3"))
replicates <- factor(rep(replicates, times = n_fractions))
# fraction: each fraction has 6 values
fraction <- factor(rep(paste0("fraction",1:n_fractions),each = n_replicates))
#Dataframe definition -> funktioniert nicht
data <- data.frame(
treatment = treatment,
replicates= replicates,
fraction= fraction,
row.names = colnames(A549_NS),
)
#dataframe definition: categorizes the information provided by the respective columns of the original dataset
df <- data.frame(
row.names = colnames(A549_NS)[colnames(A549_NS) != "Protein_Name"],
treatment = treatment,
replicates = replicates,
fraction = fraction)
View(df)
#sorting loop
# define fraction names
fraction_names <- levels(fraction)
# create subtables
tables_by_fraction <- lapply(fraction_names, function(fx) {
# select all colnames in A549_NS, which belong to a certain fraction
cols <- rownames(df)[df$fraction == fx]
#separate control and RNase sample within the subtable (grep-function searches for the word "Ctrl" or "RNase among the columnnames -> generally searches for textpatterns in vectors)
ctrl_cols <- grep("Ctrl",cols, value = TRUE)
RNase_cols <- grep("RNase",cols, value = TRUE)
ordered_cols <- c(ctrl_cols, RNase_cols)
# extract the said columns + Protein_Name
A549_NS[, c("Protein_Name", ordered_cols)]
})
#Dataframe definition -> funktioniert nicht
data <- data.frame(
treatment = treatment,
replicates= replicates,
fraction= fraction,
row.names = colnames(A549_NS),
length(colnames(A549_NS)) == length(treatment)
)
#Dataframe definition -> funktioniert nicht
data <- data.frame(
treatment = treatment,
replicates= replicates,
fraction= fraction,
row.names = colnames(A549_NS),
length(colnames(A549_NS)) == length(treatment)
)
#Dataframe definition -> funktioniert nicht
data <- data.frame(
treatment = treatment,
replicates= replicates,
fraction= fraction,
row.names = colnames(A549_NS),
length(colnames(A549_NS)) == length(treatment)
)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
#load dataset
url <- "https://hub.dkfz.de/s/QT3BfRperQqMxPF/download/RDeeP_A549_NS.csv.zip"
#Create a temporary file and download the ZIP
temp_file <- tempfile()
download.file(url, temp_file)
zip_contents <- unzip(temp_file, list = TRUE)
print(zip_contents)
csv_file <- unzip(temp_file, files = zip_contents$Name[1], exdir = tempdir())
A549_NS <- read.csv(csv_file, sep = ";", header = TRUE, row.names = 1)
View(A549_NS)
#data exploration
View(A549_NS)
#number of rows and columns
nrow(A549_NS)
ncol(A549_NS)
#type of data (überprüft die class der Spalten)
sum(sapply(A549_NS, is.numeric))
#finding NAs
sum(is.na(A549_NS))
dim(A549_NS)
n_fractions <- 25
n_replicates <- 6
# treatment: variating CTRL and RNAse, 75 pairs -> 150 columns
treatment <- factor(rep(c("CTRL", "RNASE"), times = n_fractions * n_replicates/2))
# replicates: 6 replicates per fraction
replicates <- factor(c("ctrl1","rnase1","ctrl2","rnase2","ctrl3","rnase3"))
replicates <- factor(rep(replicates, times = n_fractions))
# fraction: each fraction has 6 values
fraction <- factor(rep(paste0("fraction",1:n_fractions),each = n_replicates))
#Dataframe definition -> funktioniert nicht
data <- data.frame(
treatment = treatment,
replicates= replicates,
fraction= fraction,
row.names = colnames(A549_NS),
length(colnames(A549_NS)) == length(treatment)
)
#dataframe definition: categorizes the information provided by the respective columns of the original dataset
df <- data.frame(
row.names = colnames(A549_NS)[colnames(A549_NS) != "Protein_Name"],
treatment = treatment,
replicates = replicates,
fraction = fraction)
View(df)
#sorting loop
# define fraction names
fraction_names <- levels(fraction)
# create subtables
tables_by_fraction <- lapply(fraction_names, function(fx) {
# select all colnames in A549_NS, which belong to a certain fraction
cols <- rownames(df)[df$fraction == fx]
#separate control and RNase sample within the subtable (grep-function searches for the word "Ctrl" or "RNase among the columnnames -> generally searches for textpatterns in vectors)
ctrl_cols <- grep("Ctrl",cols, value = TRUE)
RNase_cols <- grep("RNase",cols, value = TRUE)
ordered_cols <- c(ctrl_cols, RNase_cols)
# extract the said columns + Protein_Name
A549_NS[, c("Protein_Name", ordered_cols)]
})
"Protein_Name" %in% colnames(A549_NS)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
#load dataset
url <- "https://hub.dkfz.de/s/QT3BfRperQqMxPF/download/RDeeP_A549_NS.csv.zip"
#Create a temporary file and download the ZIP
temp_file <- tempfile()
download.file(url, temp_file)
zip_contents <- unzip(temp_file, list = TRUE)
print(zip_contents)
csv_file <- unzip(temp_file, files = zip_contents$Name[1], exdir = tempdir())
A549_NS <- read.csv(csv_file, sep = ";", header = TRUE, row.names = 1)
View(A549_NS)
#data exploration
View(A549_NS)
#number of rows and columns
nrow(A549_NS)
ncol(A549_NS)
#type of data (überprüft die class der Spalten)
sum(sapply(A549_NS, is.numeric))
#finding NAs
sum(is.na(A549_NS))
dim(A549_NS)
n_fractions <- 25
n_replicates <- 6
# treatment: variating CTRL and RNAse, 75 pairs -> 150 columns
treatment <- factor(rep(c("CTRL", "RNASE"), times = n_fractions * n_replicates/2))
# replicates: 6 replicates per fraction
replicates <- factor(c("ctrl1","rnase1","ctrl2","rnase2","ctrl3","rnase3"))
replicates <- factor(rep(replicates, times = n_fractions))
# fraction: each fraction has 6 values
fraction <- factor(rep(paste0("fraction",1:n_fractions),each = n_replicates))
#Dataframe definition -> funktioniert nicht
data <- data.frame(
treatment = treatment,
replicates= replicates,
fraction= fraction,
row.names = colnames(A549_NS),
length(colnames(A549_NS)) == length(treatment)
)
#dataframe definition: categorizes the information provided by the respective columns of the original dataset
df <- data.frame(
row.names = colnames(A549_NS)[colnames(A549_NS) != "Protein_Name"],
treatment = treatment,
replicates = replicates,
fraction = fraction)
View(df)
#sorting loop
# define fraction names
fraction_names <- levels(fraction)
# create subtables
tables_by_fraction <- lapply(fraction_names, function(fx) {
# select all colnames in A549_NS, which belong to a certain fraction
cols <- rownames(df)[df$fraction == fx]
#separate control and RNase sample within the subtable (grep-function searches for the word "Ctrl" or "RNase among the columnnames -> generally searches for textpatterns in vectors)
ctrl_cols <- grep("Ctrl",cols, value = TRUE)
RNase_cols <- grep("RNase",cols, value = TRUE)
ordered_cols <- c(ctrl_cols, RNase_cols)
# extract the said columns + Protein_Name
A549_NS[, c("Protein_Name", ordered_cols)]
})
#Dataframe definition -> funktioniert nicht
data <- data.frame(
treatment = treatment,
replicates= replicates,
fraction= fraction,
row.names = colnames(A549_NS),
length(colnames(A549_NS)) == length(treatment)
)
