)
}
# Beispielaufruf
global_amplitudes_ctrl <- get_global_amplitudes(normalized_ctrl_df, global_ctrl)
head(global_amplitudes_ctrl)
get_global_amplitudes <- function(expression_df, global_rnase) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
# max_pos_str kann mehrere Maxima enthalten, z.B. "5,10"
max_positions <- as.numeric(unlist(strsplit(max_pos_str, ",")))
if (length(max_positions) == 0 || all(is.na(max_positions))) {
return(NA)
}
# Intensitäten an den Maxima (Achtung: +1 wegen Proteinspalte in expression_df)
intensities <- as.numeric(expression_df[row_idx, max_positions + 1])
# Falls mehrere Maxima, alle Werte als String mit Komma trennen
paste(intensities, collapse = ",")
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_rnase$Global_Maximum
)
data.frame(
Protein = expression_df[[1]],
Amplitudes = amplitudes,
stringsAsFactors = FALSE
)
}
# Beispielaufruf
global_amplitudes_rnase <- get_global_amplitudes(normalized_rnase_df, global_rnase)
head(global_amplitudes_rnase)
#Gain and loss of amplitudes
amplitude_diff <- global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude
#Gain and loss of amplitudes
amplitude_diff <- global_amplitudes_rnase- global_amplitudes_ctrl
#Gain and loss of amplitudes
amplitude_diff <- global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude
###Gain and loss of amplitudes
#Erst alles als Numerische Werte
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
amplitude_diff <- global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude
# Nur Verluste behalten (negative Differenzen)
amplitude_loss <- ifelse(amplitude_diff < 0, amplitude_diff, 0)
# Ergebnis als DataFrame
amplitude_losses <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
Amplitude_Loss = amplitude_loss
)
# Nur Proteine mit Verlust anzeigen
loss_only <- amplitude_losses[amplitude_losses$Amplitude_Loss < 0, ]
head(loss_only)
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
# Verlust: Abnahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_loss <- pmax(global_amplitudes_ctrl$Amplitude - global_amplitudes_rnase$Amplitude, 0)
# Zuwachs: Zunahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_gain <- pmax(global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude, 0)
# Ergebnis als Dataframe zusammenfassen
amplitude_changes <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
Verlust = amplitude_loss,
Zuwachs = amplitude_gain
)
head(amplitude_changes)
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
# Verlust: Abnahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_loss <- pmax(global_amplitudes_ctrl$Amplitude - global_amplitudes_rnase$Amplitude, 0)
# Zuwachs: Zunahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_gain <- pmax(global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude, 0)
# Ergebnis als Dataframe zusammenfassen
amplitude_changes <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
loss = amplitude_loss,
gain = amplitude_gain
)
head(amplitude_changes)
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
# Verlust: Abnahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_loss <- pmax(global_amplitudes_ctrl$Amplitude - global_amplitudes_rnase$Amplitude, 0)
# Zuwachs: Zunahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_gain <- pmax(global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude, 0)
# Ergebnis als Dataframe zusammenfassen
amplitude_changes <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
loss = amplitude_loss,
gain = amplitude_gain
)
head(amplitude_changes)
shift_distance <- global_rnase$Global_Maximum - global_ctrl$Global_Maximum
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
#RDS-Daten laden
normalized_ctrl_df <- readRDS("data/normalized_ctrl_df.rds")
str(normalized_ctrl_df)
summary(normalized_ctrl_df)
# Nur erzeugen, wenn Datei noch nicht existiert
if (!file.exists("data/normalized_ctrl_df.rds")) {
message("HAAALT!!!! Speicher erst neuen Datensatz")
final_data <- data.frame(
normalized_ctrl_df
)
saveRDS(final_data, "data/normalized_ctrl_df.rds")
} else {
message("Datensatz existiert bereits")
}
normalized_rnase_df <- readRDS("data/normalized_rnase_df.rds")
str(normalized_rnase_df)
summary(normalized_rnase_df)
if (!file.exists("data/normalized_rnase_df.rds")) {
message("HAAALT!!!! Speicher erst neuen Datensatz")
final_data <- data.frame(
normalized_rnase_df
)
saveRDS(final_data, "data/normalized_rnase_df.rds")
} else {
message("Datensatz existiert bereits")
}
## Distanz und Richtung der peak-Verschiebung: to be discussed
## Amplitude der globalen Maxima
#find global maxima
find_global_maxima <- function(x, threshold = 2) {
max_val <- max(x)
if (max_val >= threshold) {
which(x == max_val)
} else {
integer(0)  # keine Maxima, falls max < threshold
}
}
process_df_global_maxima <- function(df, threshold = 2) {
results <- lapply(1:nrow(df), function(i) {
intensities <- as.numeric(df[i, 2:26])
protein <- df[i, 1]
maxima <- find_global_maxima(intensities, threshold)
list(Protein = protein, Global_Maxima = maxima)
})
df_maxima <- data.frame(
Protein = sapply(results, `[[`, "Protein"),
Global_Maximum = sapply(results, function(x) {
if (length(x$Global_Maxima) == 0) {
NA_character_
} else {
paste(x$Global_Maxima, collapse = ",")
}
}),
stringsAsFactors = FALSE
)
return(df_maxima)
}
#apply to dataframes
global_ctrl <- process_df_global_maxima(normalized_ctrl_df, threshold =2)
global_rnase <- process_df_global_maxima(normalized_rnase_df, threshold =2)
head(global_ctrl)
get_global_amplitudes <- function(expression_df, global_ctrl) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
# max_pos_str kann mehrere Maxima enthalten, z.B. "5,10"
max_positions <- as.numeric(unlist(strsplit(max_pos_str, ",")))
if (length(max_positions) == 0 || all(is.na(max_positions))) {
return(NA)
}
# Intensitäten an den Maxima (Achtung: +1 wegen Proteinspalte in expression_df)
intensities <- as.numeric(expression_df[row_idx, max_positions + 1])
# Falls mehrere Maxima, alle Werte als String mit Komma trennen
paste(intensities, collapse = ",")
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl$Global_Maximum
)
data.frame(
Protein = expression_df[[1]],
Amplitudes = amplitudes,
stringsAsFactors = FALSE
)
}
global_amplitudes_ctrl <- get_global_amplitudes(normalized_ctrl_df, global_ctrl)
head(global_amplitudes_ctrl)
get_global_amplitudes <- function(expression_df, global_rnase) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
# max_pos_str kann mehrere Maxima enthalten, z.B. "5,10"
max_positions <- as.numeric(unlist(strsplit(max_pos_str, ",")))
if (length(max_positions) == 0 || all(is.na(max_positions))) {
return(NA)
}
# Intensitäten an den Maxima (Achtung: +1 wegen Proteinspalte in expression_df)
intensities <- as.numeric(expression_df[row_idx, max_positions + 1])
# Falls mehrere Maxima, alle Werte als String mit Komma trennen
paste(intensities, collapse = ",")
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_rnase$Global_Maximum
)
data.frame(
Protein = expression_df[[1]],
Amplitudes = amplitudes,
stringsAsFactors = FALSE
)
}
global_amplitudes_rnase <- get_global_amplitudes(normalized_rnase_df, global_rnase)
head(global_amplitudes_rnase)
##Gain and loss of amplitude in peak
# Erst numerisch machen
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
# Verlust: Abnahme der Amplitude nach RNase-Behandlung
amplitude_loss <- pmax(global_amplitudes_ctrl$Amplitude - global_amplitudes_rnase$Amplitude, 0)
# Zuwachs: Zunahme der Amplitude nach RNase-Behandlung
amplitude_gain <- pmax(global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude, 0)
amplitude_changes <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
loss = amplitude_loss,
gain = amplitude_gain
)
head(amplitude_changes)
shift_distance <- global_rnase$Global_Maximum - global_ctrl$Global_Maximum
global_ctrl$Global_Maximum <- as.numeric(as.character(global_ctrl$Global_Maximum))
global_rnase$Global_Maximum <- as.numeric(as.character(global_rnase$Global_Maximum))
shift_distance <- global_rnase$Global_Maximum - global_ctrl$Global_Maximum
# Richtung bestimmen
shift_direction <- ifelse(shift_distance > 0, "right shift",
ifelse(shift_distance < 0, "left shift",
"Kein Shift"))
# Ergebnis zusammenfassen
shift_result <- data.frame(
Protein = global_ctrl$Protein,
Position_Control = global_ctrl$Global_Maximum,
Position_RNase = global_rnase$Global_Maximum,
Shift_Distance = shift_distance,
Shift_Direction = shift_direction
)
head(shift_result)
global_ctrl$Global_Maximum <- as.numeric(as.character(global_ctrl$Global_Maximum))
global_rnase$Global_Maximum <- as.numeric(as.character(global_rnase$Global_Maximum))
shift_distance <- global_rnase$Global_Maximum - global_ctrl$Global_Maximum
# Richtung bestimmen
shift_direction <- ifelse(shift_distance > 0, "right shift",
ifelse(shift_distance < 0, "left shift",
"No Shift"))
# Ergebnis zusammenfassen
shift_result <- data.frame(
Protein = global_ctrl$Protein,
Position_Control = global_ctrl$Global_Maximum,
Position_RNase = global_rnase$Global_Maximum,
Shift_Distance = shift_distance,
Shift_Direction = shift_direction
)
head(shift_result)
knitr::opts_chunk$set(echo = TRUE)
#RDS-Daten laden
normalized_ctrl_df <- readRDS("data/normalized_ctrl_df.rds")
str(normalized_ctrl_df)
summary(normalized_ctrl_df)
# Nur erzeugen, wenn Datei noch nicht existiert
if (!file.exists("data/normalized_ctrl_df.rds")) {
message("HAAALT!!!! Speicher erst neuen Datensatz")
final_data <- data.frame(
normalized_ctrl_df
)
saveRDS(final_data, "data/normalized_ctrl_df.rds")
} else {
message("Datensatz existiert bereits")
}
normalized_rnase_df <- readRDS("data/normalized_rnase_df.rds")
str(normalized_rnase_df)
summary(normalized_rnase_df)
if (!file.exists("data/normalized_rnase_df.rds")) {
message("HAAALT!!!! Speicher erst neuen Datensatz")
final_data <- data.frame(
normalized_rnase_df
)
saveRDS(final_data, "data/normalized_rnase_df.rds")
} else {
message("Datensatz existiert bereits")
}
```{r}
#limma install nicht notwendig wenn ihr es schon habt, führt zu doofen fehlern
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.21")
head(normalized_rnase_df)
dim(normalized_rnase_df)
expr_matrix <- normalized_rnase_df[, -1]
boxplot(expr_matrix,
main = "Proteinexpression pro Fraction",
ylab = "Expression",
xlab = "Fraction",
las = 2,
col = "lightblue")
batch_labels <- c(rep("Batch1", 3), rep("Batch2", 3), rep("Batch3", 3), rep("Batch4", 3), rep("Batch5", 3), rep("Batch6", 3), rep("Batch7", 4))
colors <- as.factor(batch_labels)
boxplot(expr_matrix,
main = "Expression nach Fraction (nach Batch gefärbt)",
ylab = "Expression",
xlab = "Fraction",
las = 2,
col = rainbow(length(unique(batch_labels)))[colors])
legend("topright", legend = unique(batch_labels), fill = rainbow(length(unique(batch_labels))), title = "Batch")
names(normalized_rnase_df)
#entfernen
library(limma)
batch <- c(rep("Batch1", 3),  # Fraction1-3
rep("Batch2", 3),  # Fraction4-6
rep("Batch3", 3),  # Fraction7-9
rep("Batch4", 3),  # Fraction10-12
rep("Batch5", 3),  # Fraction13-15
rep("Batch6", 3),  # Fraction16-18
rep("Batch7", 7))  # Fraction19-25
batch <- factor(batch)
# Expression-Matrix ohne Protein-Spalte
expr_matrix <- as.matrix(normalized_rnase_df[, -1])
expr_corrected <- removeBatchEffect(expr_matrix, batch = batch)
# Originaldaten
boxplot(expr_matrix,
main = "Vor Batch-Korrektur",
las = 2,
ylab = "Expression",
col = rainbow(length(batch))[batch])
# Nach Korrektur
boxplot(expr_corrected,
main = "Nach Batch-Korrektur (limma)",
las = 2,
ylab = "Expression",
col = rainbow(length(batch))[batch])
# PCA-Analyse vorbereiten
pca_before <- prcomp(t(expr_matrix), scale. = TRUE)
pca_after  <- prcomp(t(expr_corrected), scale. = TRUE)
# Batch-Zuordnung erneut für Farben
batch <- factor(c(rep("Batch1", 3), rep("Batch2", 3), rep("Batch3", 3),
rep("Batch4", 3), rep("Batch5", 3), rep("Batch6", 3), rep("Batch7", 7)))
# Plot nebeneinander
par(mfrow = c(1, 2))
# PCA vor Korrektur
plot(pca_before$x[, 1:2],
col = rainbow(length(levels(batch)))[batch],
pch = 19,
main = "PCA vor Batch-Korrektur")
legend("topright", legend = levels(batch), col = rainbow(length(levels(batch))), pch = 19)
# PCA nach Korrektur
plot(pca_after$x[, 1:2],
col = rainbow(length(levels(batch)))[batch],
pch = 19,
main = "PCA nach Batch-Korrektur")
legend("topright", legend = levels(batch), col = rainbow(length(levels(batch))), pch = 19)
# Reset Layout
par(mfrow = c(1, 1))
# Optional: Wenn du pheatmap noch nicht hast
install.packages("pheatmap")
library(pheatmap)
# Auswahl einer Teilmenge der Proteine (z. B. Top 100 variabelsten)
select_top_var <- function(mat, top_n = 100) {
vars <- apply(mat, 1, var)
mat[order(vars, decreasing = TRUE)[1:top_n], ]
}
# Top 100 Gene mit höchster Varianz (vorher/nachher)
heat_before <- select_top_var(expr_matrix, 100)
heat_after  <- select_top_var(expr_corrected, 100)
# Spaltenannotation nach Batch
annotation_col <- data.frame(Batch = batch)
rownames(annotation_col) <- colnames(expr_matrix)
# Zwei Heatmaps nebeneinander
par(mfrow = c(1, 2))
pheatmap(heat_before,
main = "Heatmap vor Batch-Korrektur",
annotation_col = annotation_col,
show_rownames = FALSE,
cluster_cols = TRUE)
pheatmap(heat_after,
main = "Heatmap nach Batch-Korrektur",
annotation_col = annotation_col,
show_rownames = FALSE,
cluster_cols = TRUE)
# Reset Layout
par(mfrow = c(1, 1))
RNA_noBatch <- expr_corrected
head(RNA_noBatch)
knitr::opts_chunk$set(echo = TRUE)
#RDS-Daten laden
normalized_ctrl_df <- readRDS("data/normalized_ctrl_df.rds")
str(normalized_ctrl_df)
summary(normalized_ctrl_df)
# Nur erzeugen, wenn Datei noch nicht existiert
if (!file.exists("data/normalized_ctrl_df.rds")) {
message("HAAALT!!!! Speicher erst neuen Datensatz")
final_data <- data.frame(
normalized_ctrl_df
)
saveRDS(final_data, "data/normalized_ctrl_df.rds")
} else {
message("Datensatz existiert bereits")
}
normalized_rnase_df <- readRDS("data/normalized_rnase_df.rds")
str(normalized_rnase_df)
summary(normalized_rnase_df)
if (!file.exists("data/normalized_rnase_df.rds")) {
message("HAAALT!!!! Speicher erst neuen Datensatz")
final_data <- data.frame(
normalized_rnase_df
)
saveRDS(final_data, "data/normalized_rnase_df.rds")
} else {
message("Datensatz existiert bereits")
}
#limma install nicht notwendig wenn ihr es schon habt, führt zu doofen fehlern
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.21")
head(normalized_rnase_df)
dim(normalized_rnase_df)
expr_matrix <- normalized_rnase_df[, -1]
boxplot(expr_matrix,
main = "Proteinexpression pro Fraction",
ylab = "Expression",
xlab = "Fraction",
las = 2,
col = "lightblue")
batch_labels <- c(rep("Batch1", 3), rep("Batch2", 3), rep("Batch3", 3), rep("Batch4", 3), rep("Batch5", 3), rep("Batch6", 3), rep("Batch7", 4))
colors <- as.factor(batch_labels)
boxplot(expr_matrix,
main = "Expression nach Fraction (nach Batch gefärbt)",
ylab = "Expression",
xlab = "Fraction",
las = 2,
col = rainbow(length(unique(batch_labels)))[colors])
legend("topright", legend = unique(batch_labels), fill = rainbow(length(unique(batch_labels))), title = "Batch")
names(normalized_rnase_df)
#entfernen
library(limma)
batch <- c(rep("Batch1", 3),  # Fraction1-3
rep("Batch2", 3),  # Fraction4-6
rep("Batch3", 3),  # Fraction7-9
rep("Batch4", 3),  # Fraction10-12
rep("Batch5", 3),  # Fraction13-15
rep("Batch6", 3),  # Fraction16-18
rep("Batch7", 7))  # Fraction19-25
batch <- factor(batch)
# Expression-Matrix ohne Protein-Spalte
expr_matrix <- as.matrix(normalized_rnase_df[, -1])
expr_corrected <- removeBatchEffect(expr_matrix, batch = batch)
# Originaldaten
boxplot(expr_matrix,
main = "Vor Batch-Korrektur",
las = 2,
ylab = "Expression",
col = rainbow(length(batch))[batch])
# Nach Korrektur
boxplot(expr_corrected,
main = "Nach Batch-Korrektur (limma)",
las = 2,
ylab = "Expression",
col = rainbow(length(batch))[batch])
# PCA-Analyse vorbereiten
pca_before <- prcomp(t(expr_matrix), scale. = TRUE)
pca_after  <- prcomp(t(expr_corrected), scale. = TRUE)
# Batch-Zuordnung erneut für Farben
batch <- factor(c(rep("Batch1", 3), rep("Batch2", 3), rep("Batch3", 3),
rep("Batch4", 3), rep("Batch5", 3), rep("Batch6", 3), rep("Batch7", 7)))
# Plot nebeneinander
par(mfrow = c(1, 2))
# PCA vor Korrektur
plot(pca_before$x[, 1:2],
col = rainbow(length(levels(batch)))[batch],
pch = 19,
main = "PCA vor Batch-Korrektur")
legend("topright", legend = levels(batch), col = rainbow(length(levels(batch))), pch = 19)
# PCA nach Korrektur
plot(pca_after$x[, 1:2],
col = rainbow(length(levels(batch)))[batch],
pch = 19,
main = "PCA nach Batch-Korrektur")
legend("topright", legend = levels(batch), col = rainbow(length(levels(batch))), pch = 19)
# Reset Layout
par(mfrow = c(1, 1))
# Optional: Wenn du pheatmap noch nicht hast
install.packages("pheatmap")
library(pheatmap)
# Auswahl einer Teilmenge der Proteine (z. B. Top 100 variabelsten)
select_top_var <- function(mat, top_n = 100) {
vars <- apply(mat, 1, var)
mat[order(vars, decreasing = TRUE)[1:top_n], ]
}
# Top 100 Gene mit höchster Varianz (vorher/nachher)
heat_before <- select_top_var(expr_matrix, 100)
heat_after  <- select_top_var(expr_corrected, 100)
# Spaltenannotation nach Batch
annotation_col <- data.frame(Batch = batch)
rownames(annotation_col) <- colnames(expr_matrix)
# Zwei Heatmaps nebeneinander
par(mfrow = c(1, 2))
pheatmap(heat_before,
main = "Heatmap vor Batch-Korrektur",
annotation_col = annotation_col,
show_rownames = FALSE,
cluster_cols = TRUE)
pheatmap(heat_after,
main = "Heatmap nach Batch-Korrektur",
annotation_col = annotation_col,
show_rownames = FALSE,
cluster_cols = TRUE)
# Reset Layout
par(mfrow = c(1, 1))
RNA_noBatch <- expr_corrected
head(RNA_noBatch)
