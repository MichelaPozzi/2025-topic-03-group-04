which(is.na(global_ctrl$Global_Maximum))
all_numeric <- all(!is.na(as.numeric(global_ctrl$Global_Maximum)))
str(global_ctrl$Global_Maximum)
## Distanz und Richtung der peak-Verschiebung: to be discussed
## Amplitude der globalen Maxima
#find global maxima
find_global_maxima <- function(x, threshold = 2) {
max_val <- max(x)
if (max_val >= threshold) {
which(x == max_val)
} else {
integer(0)  # keine Maxima, falls max < threshold
}
}
process_df_global_maxima <- function(df, threshold = 2) {
results <- lapply(1:nrow(df), function(i) {
intensities <- as.numeric(df[i, 2:26])
protein <- df[i, 1]
maxima <- find_global_maxima(intensities, threshold)
list(Protein = protein, Global_Maxima = maxima)
})
df_maxima <- data.frame(
Protein = sapply(results, `[[`, "Protein"),
Global_Maximum = sapply(results, function(x) {
if (length(x$Global_Maxima) == 0) {
NA_character_
} else {
paste(x$Global_Maxima, collapse = ",")
}
}),
stringsAsFactors = FALSE
)
return(df_maxima)
}
#apply to dataframes
global_ctrl <- process_df_global_maxima(normalized_ctrl_df, threshold =2)
global_rnase <- process_df_global_maxima(normalized_rnase_df, threshold =2)
unique(global_ctrl$Global_Maximum)
##Peak AMplituden der Ctrl Maxima (nur den ersten??)
get_global_amplitudes <- function(expression_df, global_ctrl_df) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
if (is.na(max_pos_str) || max_pos_str == "") return(NA)
# Nur ersten Peak extrahieren, falls mehrere (z. B. "3,7")
max_pos <- as.numeric(strsplit(max_pos_str, ",")[[1]][1])
if (is.na(max_pos)) return(NA)
intensity <- as.numeric(expression_df[row_idx, max_pos + 1])  # +1 wegen Proteinspalte
return(intensity)
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl_df$Global_Maximum
)
return(data.frame(Protein = expression_df[[1]], Amplitude = amplitudes))
}
get_global_amplitudes <- function(expression_df, global_ctrl) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
# Leere oder NA-Einträge abfangen
if (is.na(max_pos_str) || max_pos_str == "") return(NA)
# Nur ersten Peak verwenden
max_pos <- suppressWarnings(as.numeric(strsplit(max_pos_str, ",")[[1]][1]))
# Ungültige Positionen abfangen
if (is.na(max_pos) || (max_pos + 1) > ncol(expression_df)) return(NA)
# +1 wegen Proteinspalte
intensity <- as.numeric(expression_df[row_idx, max_pos + 1])
return(intensity)
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl$Global_Maximum
)
return(data.frame(Protein = expression_df[[1]], Amplitude = amplitudes))
}
## Distanz und Richtung der peak-Verschiebung: to be discussed
## Amplitude der globalen Maxima
#find global maxima
find_global_maxima <- function(x, threshold = 2) {
max_val <- max(x)
if (max_val >= threshold) {
which(x == max_val)
} else {
integer(0)  # keine Maxima, falls max < threshold
}
}
process_df_global_maxima <- function(df, threshold = 2) {
results <- lapply(1:nrow(df), function(i) {
intensities <- as.numeric(df[i, 2:26])
protein <- df[i, 1]
maxima <- find_global_maxima(intensities, threshold)
list(Protein = protein, Global_Maxima = maxima)
})
df_maxima <- data.frame(
Protein = sapply(results, `[[`, "Protein"),
Global_Maximum = sapply(results, function(x) {
if (length(x$Global_Maxima) == 0) {
NA_character_
} else {
paste(x$Global_Maxima, collapse = ",")
}
}),
stringsAsFactors = FALSE
)
return(df_maxima)
}
#apply to dataframes
global_ctrl <- process_df_global_maxima(normalized_ctrl_df, threshold =2)
global_rnase <- process_df_global_maxima(normalized_rnase_df, threshold =2)
unique(global_ctrl$Global_Maximum)
##Peak AMplituden der Ctrl Maxima (nur den ersten??)
get_global_amplitudes <- function(expression_df, global_ctrl_df) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
if (is.na(max_pos_str) || max_pos_str == "") return(NA)
# Nur ersten Peak extrahieren, falls mehrere (z. B. "3,7")
max_pos <- as.numeric(strsplit(max_pos_str, ",")[[1]][1])
if (is.na(max_pos)) return(NA)
intensity <- as.numeric(expression_df[row_idx, max_pos + 1])  # +1 wegen Proteinspalte
return(intensity)
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl_df$Global_Maximum
)
return(data.frame(Protein = expression_df[[1]], Amplitude = amplitudes))
}
##Funktioniert NICHT!!
##Amplitude bestimmen
get_global_amplitudes <- function(expression_df, global_ctrl) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
max_pos <- as.numeric(max_pos_str)
if (length(max_pos) == 0 || is.na(max_pos)) return(NA)
intensity <- as.numeric(expression_df[row_idx, max_pos + 1])  # +1 wegen Proteinspalte
return(intensity)
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl$Global_Maximum
)
return(data.frame(Protein = expression_df[[1]], Amplitude = amplitudes))
}
global_amplitudes_ctrl <- get_global_amplitudes(normalized_ctrl_df, global_ctrl)
ctrl_amp <- mapply(function(row, pos) row[pos], split(ctrl_mat, row(ctrl_mat)), global_ctrl)
rnase_amp <- mapply(function(row, pos) row[pos], split(rnase_mat, row(rnase_mat)), global_rnase)
amp_diff <- ctrl_amp - rnase_amp
get_global_amplitudes <- function(expression_df, global_ctrl) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
# Leere oder NA-Einträge abfangen
if (is.na(max_pos_str) || max_pos_str == "") return(NA)
# Nur ersten Peak verwenden
max_pos <- suppressWarnings(as.numeric(strsplit(max_pos_str, ",")[[1]][1]))
# Ungültige Positionen abfangen
if (is.na(max_pos) || (max_pos + 1) > ncol(expression_df)) return(NA)
# +1 wegen Proteinspalte
intensity <- as.numeric(expression_df[row_idx, max_pos + 1])
return(intensity)
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl$Global_Maximum
)
return(data.frame(Protein = expression_df[[1]], Amplitude = amplitudes))
}
##Amplitude bestimmen
get_global_amplitudes <- function(expression_df, global_ctrl) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
max_pos <- as.numeric(max_pos_str)
if (length(max_pos) == 0 || is.na(max_pos)) return(NA)
intensity <- as.numeric(expression_df[row_idx, max_pos + 1])  # +1 wegen Proteinspalte
return(intensity)
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl$Global_Maximum
)
return(data.frame(Protein = expression_df[[1]], Amplitude = amplitudes))
}
global_amplitudes_ctrl <- get_global_amplitudes(normalized_ctrl_df, global_ctrl)
##Amplitude bestimmen
get_global_amplitudes <- function(expression_df, global_ctrl) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
max_pos <- as.numeric(max_pos_str)
if (length(max_pos) == 0 || is.na(max_pos)) return(NA)
intensity <- as.numeric(expression_df[row_idx, max_pos + 1])  # +1 wegen Proteinspalte
return(intensity)
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl$Global_Maximum
)
return(data.frame(Protein = expression_df[[1]], Amplitude = amplitudes))
}
global_amplitudes_ctrl <- get_global_amplitudes(normalized_ctrl_df, global_ctrl)
amplitudes_ctrl <- merge(normalized_ctrl_df, global_amplitudes_ctrl, by = "Protein", all.x = TRUE)
head(amplitudes_ctrl)
## Distanz und Richtung der peak-Verschiebung: to be discussed
## Amplitude der globalen Maxima
#find global maxima
find_global_maxima <- function(x, threshold = 2) {
max_val <- max(x)
if (max_val >= threshold) {
which(x == max_val)
} else {
integer(0)  # keine Maxima, falls max < threshold
}
}
process_df_global_maxima <- function(df, threshold = 2) {
results <- lapply(1:nrow(df), function(i) {
intensities <- as.numeric(df[i, 2:26])
protein <- df[i, 1]
maxima <- find_global_maxima(intensities, threshold)
list(Protein = protein, Global_Maxima = maxima)
})
df_maxima <- data.frame(
Protein = sapply(results, `[[`, "Protein"),
Global_Maximum = sapply(results, function(x) {
if (length(x$Global_Maxima) == 0) {
NA_character_
} else {
paste(x$Global_Maxima, collapse = ",")
}
}),
stringsAsFactors = FALSE
)
return(df_maxima)
}
#apply to dataframes
global_ctrl <- process_df_global_maxima(normalized_ctrl_df, threshold =2)
global_rnase <- process_df_global_maxima(normalized_rnase_df, threshold =2)
head(global_ctrl)
##Amplitude bestimmen
get_global_amplitudes <- function(expression_df, global_ctrl) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
max_pos <- as.numeric(max_pos_str)
if (length(max_pos) == 0 || is.na(max_pos)) return(NA)
intensity <- as.numeric(expression_df[row_idx, max_pos + 1])  # +1 wegen Proteinspalte
return(intensity)
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl$Global_Maximum
)
return(data.frame(Protein = expression_df[[1]], Amplitude = amplitudes))
}
global_amplitudes_ctrl <- get_global_amplitudes(normalized_ctrl_df, global_ctrl)
amplitudes_ctrl <- merge(normalized_ctrl_df, global_amplitudes_ctrl, by = "Protein", all.x = TRUE)
head(amplitudes_ctrl)
get_global_amplitudes <- function(expression_df, global_ctrl) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
# max_pos_str kann mehrere Maxima enthalten, z.B. "5,10"
max_positions <- as.numeric(unlist(strsplit(max_pos_str, ",")))
if (length(max_positions) == 0 || all(is.na(max_positions))) {
return(NA)
}
# Intensitäten an den Maxima (Achtung: +1 wegen Proteinspalte in expression_df)
intensities <- as.numeric(expression_df[row_idx, max_positions + 1])
# Falls mehrere Maxima, alle Werte als String mit Komma trennen
paste(intensities, collapse = ",")
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl$Global_Maximum
)
data.frame(
Protein = expression_df[[1]],
Amplitudes = amplitudes,
stringsAsFactors = FALSE
)
}
# Beispielaufruf
global_amplitudes_ctrl <- get_global_amplitudes(normalized_ctrl_df, global_ctrl)
head(global_amplitudes_ctrl)
get_global_amplitudes <- function(expression_df, global_rnase) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
# max_pos_str kann mehrere Maxima enthalten, z.B. "5,10"
max_positions <- as.numeric(unlist(strsplit(max_pos_str, ",")))
if (length(max_positions) == 0 || all(is.na(max_positions))) {
return(NA)
}
# Intensitäten an den Maxima (Achtung: +1 wegen Proteinspalte in expression_df)
intensities <- as.numeric(expression_df[row_idx, max_positions + 1])
# Falls mehrere Maxima, alle Werte als String mit Komma trennen
paste(intensities, collapse = ",")
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_rnase$Global_Maximum
)
data.frame(
Protein = expression_df[[1]],
Amplitudes = amplitudes,
stringsAsFactors = FALSE
)
}
# Beispielaufruf
global_amplitudes_rnase <- get_global_amplitudes(normalized_rnase_df, global_rnase)
head(global_amplitudes_rnase)
#Gain and loss of amplitudes
amplitude_diff <- global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude
#Gain and loss of amplitudes
amplitude_diff <- global_amplitudes_rnase- global_amplitudes_ctrl
#Gain and loss of amplitudes
amplitude_diff <- global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude
###Gain and loss of amplitudes
#Erst alles als Numerische Werte
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
amplitude_diff <- global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude
# Nur Verluste behalten (negative Differenzen)
amplitude_loss <- ifelse(amplitude_diff < 0, amplitude_diff, 0)
# Ergebnis als DataFrame
amplitude_losses <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
Amplitude_Loss = amplitude_loss
)
# Nur Proteine mit Verlust anzeigen
loss_only <- amplitude_losses[amplitude_losses$Amplitude_Loss < 0, ]
head(loss_only)
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
# Verlust: Abnahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_loss <- pmax(global_amplitudes_ctrl$Amplitude - global_amplitudes_rnase$Amplitude, 0)
# Zuwachs: Zunahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_gain <- pmax(global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude, 0)
# Ergebnis als Dataframe zusammenfassen
amplitude_changes <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
Verlust = amplitude_loss,
Zuwachs = amplitude_gain
)
head(amplitude_changes)
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
# Verlust: Abnahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_loss <- pmax(global_amplitudes_ctrl$Amplitude - global_amplitudes_rnase$Amplitude, 0)
# Zuwachs: Zunahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_gain <- pmax(global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude, 0)
# Ergebnis als Dataframe zusammenfassen
amplitude_changes <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
loss = amplitude_loss,
gain = amplitude_gain
)
head(amplitude_changes)
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
# Verlust: Abnahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_loss <- pmax(global_amplitudes_ctrl$Amplitude - global_amplitudes_rnase$Amplitude, 0)
# Zuwachs: Zunahme der Amplitude nach RNase-Behandlung (nur positive Werte, sonst 0)
amplitude_gain <- pmax(global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude, 0)
# Ergebnis als Dataframe zusammenfassen
amplitude_changes <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
loss = amplitude_loss,
gain = amplitude_gain
)
head(amplitude_changes)
shift_distance <- global_rnase$Global_Maximum - global_ctrl$Global_Maximum
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
#RDS-Daten laden
normalized_ctrl_df <- readRDS("data/normalized_ctrl_df.rds")
str(normalized_ctrl_df)
summary(normalized_ctrl_df)
# Nur erzeugen, wenn Datei noch nicht existiert
if (!file.exists("data/normalized_ctrl_df.rds")) {
message("HAAALT!!!! Speicher erst neuen Datensatz")
final_data <- data.frame(
normalized_ctrl_df
)
saveRDS(final_data, "data/normalized_ctrl_df.rds")
} else {
message("Datensatz existiert bereits")
}
normalized_rnase_df <- readRDS("data/normalized_rnase_df.rds")
str(normalized_rnase_df)
summary(normalized_rnase_df)
if (!file.exists("data/normalized_rnase_df.rds")) {
message("HAAALT!!!! Speicher erst neuen Datensatz")
final_data <- data.frame(
normalized_rnase_df
)
saveRDS(final_data, "data/normalized_rnase_df.rds")
} else {
message("Datensatz existiert bereits")
}
## Distanz und Richtung der peak-Verschiebung: to be discussed
## Amplitude der globalen Maxima
#find global maxima
find_global_maxima <- function(x, threshold = 2) {
max_val <- max(x)
if (max_val >= threshold) {
which(x == max_val)
} else {
integer(0)  # keine Maxima, falls max < threshold
}
}
process_df_global_maxima <- function(df, threshold = 2) {
results <- lapply(1:nrow(df), function(i) {
intensities <- as.numeric(df[i, 2:26])
protein <- df[i, 1]
maxima <- find_global_maxima(intensities, threshold)
list(Protein = protein, Global_Maxima = maxima)
})
df_maxima <- data.frame(
Protein = sapply(results, `[[`, "Protein"),
Global_Maximum = sapply(results, function(x) {
if (length(x$Global_Maxima) == 0) {
NA_character_
} else {
paste(x$Global_Maxima, collapse = ",")
}
}),
stringsAsFactors = FALSE
)
return(df_maxima)
}
#apply to dataframes
global_ctrl <- process_df_global_maxima(normalized_ctrl_df, threshold =2)
global_rnase <- process_df_global_maxima(normalized_rnase_df, threshold =2)
head(global_ctrl)
get_global_amplitudes <- function(expression_df, global_ctrl) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
# max_pos_str kann mehrere Maxima enthalten, z.B. "5,10"
max_positions <- as.numeric(unlist(strsplit(max_pos_str, ",")))
if (length(max_positions) == 0 || all(is.na(max_positions))) {
return(NA)
}
# Intensitäten an den Maxima (Achtung: +1 wegen Proteinspalte in expression_df)
intensities <- as.numeric(expression_df[row_idx, max_positions + 1])
# Falls mehrere Maxima, alle Werte als String mit Komma trennen
paste(intensities, collapse = ",")
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_ctrl$Global_Maximum
)
data.frame(
Protein = expression_df[[1]],
Amplitudes = amplitudes,
stringsAsFactors = FALSE
)
}
global_amplitudes_ctrl <- get_global_amplitudes(normalized_ctrl_df, global_ctrl)
head(global_amplitudes_ctrl)
get_global_amplitudes <- function(expression_df, global_rnase) {
amplitudes <- mapply(function(row_idx, max_pos_str) {
# max_pos_str kann mehrere Maxima enthalten, z.B. "5,10"
max_positions <- as.numeric(unlist(strsplit(max_pos_str, ",")))
if (length(max_positions) == 0 || all(is.na(max_positions))) {
return(NA)
}
# Intensitäten an den Maxima (Achtung: +1 wegen Proteinspalte in expression_df)
intensities <- as.numeric(expression_df[row_idx, max_positions + 1])
# Falls mehrere Maxima, alle Werte als String mit Komma trennen
paste(intensities, collapse = ",")
},
row_idx = 1:nrow(expression_df),
max_pos_str = global_rnase$Global_Maximum
)
data.frame(
Protein = expression_df[[1]],
Amplitudes = amplitudes,
stringsAsFactors = FALSE
)
}
global_amplitudes_rnase <- get_global_amplitudes(normalized_rnase_df, global_rnase)
head(global_amplitudes_rnase)
##Gain and loss of amplitude in peak
# Erst numerisch machen
global_amplitudes_ctrl$Amplitude <- as.numeric(as.character(global_amplitudes_ctrl$Amplitude))
global_amplitudes_rnase$Amplitude <- as.numeric(as.character(global_amplitudes_rnase$Amplitude))
# Verlust: Abnahme der Amplitude nach RNase-Behandlung
amplitude_loss <- pmax(global_amplitudes_ctrl$Amplitude - global_amplitudes_rnase$Amplitude, 0)
# Zuwachs: Zunahme der Amplitude nach RNase-Behandlung
amplitude_gain <- pmax(global_amplitudes_rnase$Amplitude - global_amplitudes_ctrl$Amplitude, 0)
amplitude_changes <- data.frame(
Protein = global_amplitudes_ctrl$Protein,
Amplitude_Control = global_amplitudes_ctrl$Amplitude,
Amplitude_RNase = global_amplitudes_rnase$Amplitude,
loss = amplitude_loss,
gain = amplitude_gain
)
head(amplitude_changes)
shift_distance <- global_rnase$Global_Maximum - global_ctrl$Global_Maximum
global_ctrl$Global_Maximum <- as.numeric(as.character(global_ctrl$Global_Maximum))
global_rnase$Global_Maximum <- as.numeric(as.character(global_rnase$Global_Maximum))
shift_distance <- global_rnase$Global_Maximum - global_ctrl$Global_Maximum
# Richtung bestimmen
shift_direction <- ifelse(shift_distance > 0, "right shift",
ifelse(shift_distance < 0, "left shift",
"Kein Shift"))
# Ergebnis zusammenfassen
shift_result <- data.frame(
Protein = global_ctrl$Protein,
Position_Control = global_ctrl$Global_Maximum,
Position_RNase = global_rnase$Global_Maximum,
Shift_Distance = shift_distance,
Shift_Direction = shift_direction
)
head(shift_result)
global_ctrl$Global_Maximum <- as.numeric(as.character(global_ctrl$Global_Maximum))
global_rnase$Global_Maximum <- as.numeric(as.character(global_rnase$Global_Maximum))
shift_distance <- global_rnase$Global_Maximum - global_ctrl$Global_Maximum
# Richtung bestimmen
shift_direction <- ifelse(shift_distance > 0, "right shift",
ifelse(shift_distance < 0, "left shift",
"No Shift"))
# Ergebnis zusammenfassen
shift_result <- data.frame(
Protein = global_ctrl$Protein,
Position_Control = global_ctrl$Global_Maximum,
Position_RNase = global_rnase$Global_Maximum,
Shift_Distance = shift_distance,
Shift_Direction = shift_direction
)
head(shift_result)
